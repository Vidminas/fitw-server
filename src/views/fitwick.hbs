<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  socket.on("{{ events.SERVER_EVENT_LOG_MESSAGE }}", (message) => {
    const messageList = document.getElementById("messageList");
    const newMessage = document.createElement("li");
    if (message.verboseOnly) {
      newMessage.className = "verbose";
    }
    newMessage.appendChild(document.createTextNode(`[${message.date}] ${message.username}: ${message.text}`));
    messageList.insertBefore(newMessage, messageList.firstChild);
  });

  socket.on("{{ events.SERVER_EVENT_PLAYER_COUNT_CHANGED }}", (newCount) => {
    document.getElementById("numLivePlayers").innerHTML = newCount;
  });

  socket.on("{{ events.SERVER_EVENT_WORLD_COUNT_CHANGED }}", (newCount) => {
    document.getElementById("numLiveWorlds").innerHTML = newCount;
  });

  let disconnectAllWarning = false;

  const disconnectAll = () => {
    if (!disconnectAllWarning) {
      disconnectAllWarning = true;
      document.getElementById("disconnectWarning").innerHTML = "Are you sure?";
      return;
    }
    disconnectAllWarning = false;
    document.getElementById("disconnectWarning").innerHTML = "";
    socket.emit("{{ events.SERVER_EVENT_DISCONNECT_ALL }}");
  }

  const makeItTomorrow = () => {
    socket.emit("{{ events.SERVER_EVENT_TOMORROW }}", (today) => {
      document.getElementById("today").innerHTML = today;
    });
  };

  const makeItYesterday = () => {
    socket.emit("{{ events.SERVER_EVENT_YESTERDAY }}", (today) => {
      document.getElementById("today").innerHTML = today;
    });
  }

  const toggleVerboseMode = (checkbox) => {
    if (checkbox.checked) {
      socket.emit("{{ events.SERVER_EVENT_VERBOSE_MODE_ON }}");
      for (const verboseMessage of document.getElementsByClassName("verbose")) {
        verboseMessage.style.visibility = "visible";
      }
    } else {
      socket.emit("{{ events.SERVER_EVENT_VERBOSE_MODE_OFF }}");
      for (const verboseMessage of document.getElementsByClassName("verbose")) {
        verboseMessage.style.visibility = "hidden";
      }
    }
  }
</script>

<style>
  body {
    overflow-y: scroll;
  }

  .verbose {
    display: none;
  }

  #verboseMode:checked+#messageList>.verbose {
    display: list-item;
  }
</style>

<h1>Fill In The World</h1>
<section>
  <span>
    This is the admin panel for the live Fill In The World Server.
    Take care with these actions, they can mess up player data!
    For example, changing dates in a non-linear way breaks the sorted array assumption.
    The game client is hosted at:
  </span>
  <a href="https://fitw.azurewebsites.net/">https://fitw.azurewebsites.net/</a>
</section>
<section>
  <span>There are </span>
  <span id="numLivePlayers">{{numLivePlayers}}</span>
  <span> currently connected players in </span>
  <span id="numLiveWorlds">{{numLiveWorlds}}</span>
  <span> worlds.</span>
  <button onclick="disconnectAll()">Disconnect everyone!</button>
  <span id="disconnectWarning" style="color: red;"></span>
</section>
<section>
  <span>The current server date is </span>
  <span id="today">{{today}}</span>
  <button onclick="makeItTomorrow()">Make it tomorrow!</button>
  <button onclick="makeItYesterday()">Make it yesterday!</button>
</section>
<section>
  <span>Server log:</span>
  <a href="/fitwick/logs" download="server_logs.json">Download JSON</a>
  <label>Verbose mode</label>
  <input id="verboseMode" type="checkbox" onclick="toggleVerboseMode(this)" />
  <ul id="messageList">
    {{#each serverLogMessages}}
    <li {{#if this.verboseOnly}}class="verbose" {{/if}}>[{{this.date}}] {{this.username}}: {{this.text}}</li>
    {{/each}}
  </ul>
</section>